/**
 * File generated from the NewModel::operation::BinExpr uml Class
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 */
package operation;

import operand.Operand;
import operand.Address;
// Start of user code (user defined imports)

// End of user code

/**
 * Description of BinExpr.
 */
public abstract class BinExpr implements Operation {
    /**
     * Description of the property op1.
     */
    private Operand op1 = null;
    
    /**
     * Description of the property op2.
     */
    private Operand op2 = null;
    
    /**
     * Description of the property address.
     */
    private Address address = null;
    
    // Start of user code (user defined attributes)
    
    // End of user code
    
    /**
     * The constructor.
     */
    public BinExpr() {
    	// Start of user code constructor
    	super();
    	// End of user code
    }
    
    /**
     * Description of the method exec.
     * @param memory 
     * @param progCounter 
     */
    public void exec(Memory memory, ProgCounter progCounter) {
    	// Start of user code for method exec
    	// End of user code
    }
     
    // Start of user code (user defined methods)
    
    // End of user code
    
    /**
     * Returns op1.
     * @return op1 
     */
    public Operand getOp1() {
    	return this.op1;
    }
    
    /**
     * Sets a value to attribute op1. 
     * @param newOp1 
     */
    public void setOp1(Operand newOp1) {
        this.op1 = newOp1;
    }
    
    /**
     * Returns op2.
     * @return op2 
     */
    public Operand getOp2() {
    	return this.op2;
    }
    
    /**
     * Sets a value to attribute op2. 
     * @param newOp2 
     */
    public void setOp2(Operand newOp2) {
        this.op2 = newOp2;
    }
    
    /**
     * Returns address.
     * @return address 
     */
    public Address getAddress() {
    	return this.address;
    }
    
    /**
     * Sets a value to attribute address. 
     * @param newAddress 
     */
    public void setAddress(Address newAddress) {
        this.address = newAddress;
    }
    
    
}
